#!/bin/bash
site_definions_directory="hgv_data/config/sites"
site_content_directory="hgv_data/sites/"
active_sites=${site_definions_directory}"/active/"
inactive_sites=${site_definions_directory}"/inactive/"

function outputMessage()
{
    message_text=$1
    printf "\n"
    echo "<=============================================>"
    echo "  ${message_text}"
    echo "<=============================================>"
    printf "\n"
}

function showNoInputError()
{
    outputMessage "You must specify a target site"
    exit 1
}

function checkForInput()
{
    if [ "$1" != "" ];
    then
        return 0 # exists
    else
        return 1 # does not exist
    fi
}

function checkDir() {
  if [ -d "$1" ]
  then
    # 0 = true
    return 0 
  else
    # 1 = false
    return 1
  fi
}

function checkFile() {
  if [ -f "$1" ]
  then
    return 0 # exists
  else
    return 1 # does not exist
  fi
}

function deleteDirectory()
{
    # Make sure that a site has been specified first
    if checkForInput $1;
    then
        if checkDir ${site_content_directory}$1; then
            outputMessage "removing directory: ${site_content_directory}$1"
            rm -rf ${site_content_directory}$1
        else 
            outputMessage "directory not found"
        fi
    else 
        outputMessage "no directory specified"
    fi
}

function disableAllSites()
{
    if checkFile ${active_sites}*; then
        mv ${active_sites}* ${inactive_sites}
    fi
}

# Write the <site>.yml file for a new project
function build()
{
    if ! checkForInput $1; then
        showNoInputError
    else 
        # the sites directory where the .yml files for each site is stored
        file_name="$1.yml"
        target_file="${active_sites}${file_name}"

        mkdir -p ${active_sites}

    # set up the structure for the YAML file
    read -d '' yml_file <<EOF
    ---
    wp:
        enviro: $1
        hhvm_domains:
            - $1-hhvm.hgv.test
        php_domains:
            - $1.hgv.test
EOF

        if checkFile ${target_file}; then
            outputMessage "remove existing ${file_name} file..."
            rm ${target_file}
            outputMessage "removed existing ${file_name}"
        fi

        outputMessage "writing ${file_name}..."
        # show the user the contents of the YAML file to be written
        echo "${yml_file}"

        # disable all other sites before provisioning the new site
        disableAllSites

        # write the YAML file for the new site
        echo "${yml_file}" >> ${target_file}
        outputMessage "file written"
        outputMessage "wrote ${file_name}"

        vagrant reload --provision
    fi
}

function enable()
{
    if checkForInput $1;
    then
        target_site="$1.yml"

        if checkFile ${active_sites}${target_site};
        then
            echo ${site_content_directory}$1"/wp-admin"
            if checkDir ${site_content_directory}$1"/wp-admin"
            then
                outputMessage "This site is already active.  Have you run 'vagrant up'?"
            else
                outputMessage "There is no Wordpress installation for this site.  Run 'vagrant provision' now? y/N"
                read provision

                if [ ${provision} ==  "y" ];
                then
                    outputMessage "provisioning site"
                    vagrant provision
                else
                    outputMessage "skipping provision, site enabling halted"
                fi
            fi
        elif checkFile ${inactive_sites}${target_site};
        then
            mkdir -p ${active_sites}
            
            # disable all other sites by moving them from the active folder to the inactive folder
            outputMessage "disabling all sites"
            shopt -s -q dotglob nullglob

            if checkFile ${active_sites}*;
            then
                mv ${active_sites}* ${inactive_sites}
            fi 
            
            outputMessage "enabling ${target_site}"
            mv ${inactive_sites}${target_site} ${active_sites}${target_site}

            outputMessage "reloading vagrant"

            # reload vagrant to force local DNS to update and include the newly enabled site
            vagrant reload
            outputMessage "vagrant reloaded"

            
        else
            outputMessage "no matching site found to enable"
        fi
    else
        showNoInputError
    fi
}

function disable()
{
    if checkForInput $1;
    then
        target_site="$1.yml"

        if checkFile ${active_sites}$1".yml";
        then
            mkdir -p ${inactive_sites}

            if checkFile ${active_sites}${target_site}; then
                outputMessage "disabling ${target_site}"
            else
                outputMessage "site not found"
            fi
            disableAllSites
        else
            outputMessage "no matching site found to disable"
        fi
    else 
        showNoInputError
    fi
}

function destroy()
{
    if checkForInput $1;
    then
        target=$1
        target_site="${target}.yml"
        target_site_content_directory=${site_content_directory}${target}

        printf "\n"
        echo "==============================================================================="
        printf "\n"
        cat <<EOF
                 xxxxxxx
             xxxxxxxxxxxxxxx
          xxxxxxxxxxxxxxxxxxxxx
         xxxxxxxxxxxxxxxxxxxxxxx
        xxxxxxxxxxxxxxxxxxxxxxxxx
       xxxxxxxxxxxxxxxxxxxxxxxxxxx
       xxxxxxxxxxxxxxxxxxxxxxxxxxx
       xxxxxxxx   xxxxx   xxxxxxxx
       xxxxxx      xxx       xxxxx
        xxxx       xxx       xxxx
        xxxx      xxxxx      xxxx
         xxxxxxxxxx   xxxxxxxxxx
          xxxxxxxxx   xxxxxxxxx
            xxxxxxxxxxxxxxxxx
             xxxxxxxxxxxxxxx
  xxx        xxxx x x x xxxx       xxx
 xxxxx        xxxxxxxxxxxxx       xxxxx
  xxxxxxx      xxxxxxxxxxx     xxxxxxxx
xxxxxxxxxxxxxx    xxxxx    xxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxx   xxxxxxxxxxxxxxxxxx
 xxx      xxxxxxxxxxxxxxx xxxxxx
           xxxx xxxxxxxxxxxxxxx
  xxxxxxxxxxxxxxxxxx xxxxxxxxxxxxxxxxxxx
  xxxxxxxxxxxxxx           xxxxxxxxxxxxxx
   xxxxxxx                      xxxxxxxx
     xxxx                         xxxxx
EOF

        printf "\n"
        echo "Hey, this is a REALLY drastic measure.  This will remove the the following:"
        printf "\n"
        echo "- ${target_site}"
        echo "- ${target_site_content_directory}"
        echo "- the SQL database for wpe_${target}"
        printf "\n"
        echo "This will also delete your local working repo, so you had better make"
        echo "sure all of your commits are up to date."
        printf "\n"
        echo "Are you REALLY sure you want to do this? y/N"
        echo "==============================================================================="
        printf "\n"
        read confirm

        if [ ${confirm} ==  "y" ]; then
            # connect to the HGV vagrant machine and remove the target wpe_<site> SQL database
            outputMessage "removing database"
            read -d '' remove_site_sql <<EOF
    DROP wpe_${target};
EOF
            vagrant ssh -c "mysqladmin -u root -f ${remove_site_sql} exit"
            outputMessage "database removed"

            # Check for the <site>.yml file to remove
            outputMessage "checking for YAML file"

            if checkFile ${inactive_sites}${target_site}; then
                rm ${inactive_sites}${target_site}
                echo "-- removing ${target_site}"
            elif checkFile ${active_sites}${target_site}; then
                rm ${active_sites}${target_site}
                echo "-- removing ${target_site}"
            else
                echo "-- No matching YAML file found"
            fi

            outputMessage "done checking for YAML file"

            # Check for the site content directory to remove
            outputMessage "Checking for site content directory at ${target_site_content_directory}"
            deleteDirectory ${target}
            outputMessage "Done checking for site content directory"
            
            exit
        else
            outputMessage "Abort codes accepted, missiles standing down."
            exit 1
        fi
    else
        showNoInputError
    fi
}

# Help docs for this file
if [ "$1" == "-h" ] || [ "$1" == "" ]; then
    printf "\n"
    printf "Usage: hgv_project <command> <site>\n"
    printf "\n"
    printf "    build       create a new <site>.yml file, reload vagrant, and then run vagrant provision\n"
    printf "    enable      move an existing <site>.yml file into the 'active' directory and then run a vagrant reload\n"
    printf "    disable     move an existing <site>.yml file from the 'active' to 'inactive' directory\n"
    printf "    destroy     completely removing a local site by deleting <site>.yml, /hgv_data/sites/<site>, and the SQL database for wpe_<site>\n"
    printf "\n"
    exit 1
fi

$@
